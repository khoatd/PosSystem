//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : @ ShoppingCentral
//  @ File Name : SaleController.cs
//  @ Date : 2/21/2013
//  @ Author :  kenjuzi
//
//
using System;
using System.Linq;
using System.Collections.Generic;
using lhk.POS.Core.Domain;
using lhk.POS.Presentation.Models;
using lhk.POS.Common.Business;
using Nop.Core.Infrastructure;
using PosSystem.Depency;
using lhk.POS.Data;
using lhk.POS.Presentation.Views;
using System.Threading;
using lhk.POS.Core.Util;
using System.Text;
using lhk.POS.Presentation;

namespace lhk.POS.Presentation.Presenters
{
    public class SalePresenter
    {

        private SaleModel _model;
        private Customer _buyer;
        private ISaleView _view;

        protected OrderBusiness _business;
        protected OrderItemBusiness _businessItems;
        protected CustomerBusiness _businessCustomer;
        protected ProductBusiness _businessProduct;


        public Customer Buyer
        {
            get { return _buyer; }
            set { _buyer = value; }
        }

        public SalePresenter(ISaleView view)
        {
            _business = new OrderBusiness(Singleton<PosEngine>.Instance.Resolve<IRepository<Order>>());
            _businessItems = new OrderItemBusiness(Singleton<PosEngine>.Instance.Resolve<IRepository<OrderItem>>());
            _businessCustomer = new CustomerBusiness(Singleton<PosEngine>.Instance.Resolve<IRepository<Customer>>());
            _businessProduct = new ProductBusiness(Singleton<PosEngine>.Instance.Resolve<IRepository<Product>>());
            _view = view;

            _model = new SaleModel(new Customer());

            _view.InitView(_model);
        }

        public void ClearAll()
        {
            _model.Customer = new Customer();
        }

        public StringBuilder HandlePayOut(Order order)
        {
            StringBuilder errMessage = new StringBuilder();
            try
            {
                AppLogger.logInfo(this.ToString(), "HandlePayOut");

                var cus = _businessCustomer.GetById(_model.Customer.Id);
                if (cus != null)
                {
                    order.CustomerId = cus.Id;
                }
                
                _business.Insert(order);

                if (cus != null)
                {
                    cus.TotalPurchase += order.TotalPayment;
                    cus.Purchase += order.TotalPayment;

                    _businessCustomer.Update(cus);
                }
            }
            catch (Exception exc)
            {
                AppLogger.logError(this.ToString(), exc);
                errMessage.AppendLine(exc.Message);
            }
            return errMessage;
        }

        public StringBuilder HandlePayAndPrint(Order order)
        {
            StringBuilder errMessage = new StringBuilder();

            try
            {
                HandlePayOut(order);

                List<OrderItemReportEntity> reportItems = new List<OrderItemReportEntity>();

                foreach (var i in order.OrderItems)
                {
                    var product = _businessProduct.GetById(i.ProductId);

                    var entity = new OrderItemReportEntity()
                    {
                        Barcode = product.Barcode,
                        Quantity = i.Quantity,
                        Name = product.Name,
                        Id = product.Id.ToString(),
                        Price = product.Price,
                        Total = (i.Quantity * product.Price)
                    };

                    reportItems.Add(entity);
                }


                AppLogger.logInfo(this.ToString(), " print bill");

                InvoicePrinter printer = new InvoicePrinter(order, reportItems);
                printer.Run();
            }
            catch (Exception exc)
            {
                AppLogger.logError(this.ToString(), exc);
                errMessage.AppendLine(exc.Message);
            }
            return errMessage;
        }

    }
}
