//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : @ ShoppingCentral
//  @ File Name : PriceController.cs
//  @ Date : 2/21/2013
//  @ Author :  kenjuzi
//
//

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Text;
using lhk.POS.Common.Business;
using lhk.POS.Core.Domain;
using lhk.POS.Core.Util;
using lhk.POS.Data;
using lhk.POS.Presentation.Models;
using lhk.POS.Presentation.Views;
using Nop.Core.Infrastructure;
using PosSystem.Depency;

namespace lhk.POS.Presentation.Presenters
{
    public class ProductPricePresenter
    {
        protected ProductPriceModel _model;
        protected IProductPriceView _view;

        private ProductBusiness _businessProduct;
        //private ProductPriceBusiness _businessPrice;

        public ProductPricePresenter(IProductPriceView view, Product product)
        {
            //_businessProduct = new ProductBusiness(Singleton<PosEngine>.Instance.Resolve<IRepository<Product>>());
            //_businessPrice = new ProductPriceBusiness(Singleton<PosEngine>.Instance.Resolve<IRepository<ProductPrice>>());

            _businessProduct = (Singleton<ProductBusiness>.Instance); // businessProduct;
            _view = view;

            _model = new ProductPriceModel(product);
            _view.InitView(_model);
        }

        public StringBuilder checkData()
        {
            StringBuilder errMessage = new StringBuilder();

            if (string.IsNullOrWhiteSpace(_model.Price))
            {
                errMessage.AppendLine("Giá bán không được để trống!");
            } if (string.IsNullOrWhiteSpace(_model.Cost))
            {
                errMessage.AppendLine("Giá nhập không được để trống!");
            }

            decimal newPrice = 0;
            if (decimal.TryParse(_model.NewPrice.Replace(",", ""), out newPrice) == false)
            {
                errMessage.AppendLine("Giá bán không hợp lệ (chỉ nhập số lớn hơn 0, không nhập chữ)!");
            }
            decimal newCost = 0;
            if (decimal.TryParse(_model.NewCost.Replace(",", ""), out newCost) == false)
            {
                errMessage.AppendLine("Giá nhập không hợp lệ (chỉ nhập số lớn hơn 0, không nhập chữ)!");
            }

            if (newCost > newPrice)
            {
                errMessage.AppendLine("Giá bán không được nhỏ hơn giá nhập");
            }

            return errMessage;
        }

        public StringBuilder UpdatePrice()
        {
            StringBuilder errorMessage = new StringBuilder();
            try
            {
                AppLogger.logInfo(" UpdatePrice ");

                errorMessage = checkData();
                if (errorMessage.Length != 0)
                {
                    return errorMessage;
                }

                ProductPrice oldPrice = _model.Product.ProductPrices.FirstOrDefault(i => i.IsCurrentPrice); //_businessPrice.GetProductAvailablePrice(product.Id);

                if (oldPrice != null)
                {
                    oldPrice.IsCurrentPrice = false;
                }

                ProductPrice price = new ProductPrice();
                price.ProductId = _model.Product.Id;
                price.Price = CurrencyUtil.ToDecimal(_model.NewPrice);
                price.Cost =  CurrencyUtil.ToDecimal(_model.NewCost);
                price.IsCurrentPrice = true;

                _model.Product.Price = price.Price;
                _model.Product.Cost = price.Cost;
                _model.Product.ChangedDate = DateTime.Now;
                _model.Product.ChangedBy = SystemParam.CurrentUser.Id;

                _model.Product.ProductPrices.Add(price);

                try
                {
                    //_businessPrice.Insert(price, false);

                    //_businessPrice.Update(oldPrice, true);

                    _businessProduct.Update(_model.Product);
                }
                catch (Exception exc)
                {
                    AppLogger.logError(exc.Message);
                    errorMessage.AppendLine(exc.Message);
                }

                return errorMessage;
            }
            catch (Exception exc)
            {
                AppLogger.logError(exc.Message);
                return errorMessage.AppendLine(exc.Message);
            }
        }

        public void clearAll()
        {
            try
            {
                _model.Product = new Product();

                _model.NewCost = string.Empty;
                _model.NewPrice = string.Empty;
                _model.Reason = string.Empty;
            }
            catch (Exception exc)
            {
                AppLogger.logError(exc);
                throw exc;
            }
        }
    }
}
