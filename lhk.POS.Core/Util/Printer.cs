//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : TransportSystem
//  @ File Name : PrinterUtil.cs
//  @ Date : 12/17/2013
//  @ Author : khoatd
//
//
using System;
using System.Collections;
using System.Collections.Generic;
using lhk.POS.Core.Report;
using DBManagement;
using System.Windows.Forms;
using System.Collections.ObjectModel;
using lhk.POS.Core.Business;
using lhk.POS.Core.Constant;
using lhk.POS.Core.Entity;
using System.Threading;
using CrystalDecisions.CrystalReports.Engine;

namespace lhk.POS.Core.Util
{
    public class Printer
    {
        protected static List<Thread> _listThread = new List<Thread>();
        protected static int MAX_PRINTING_THREAD = 3;

        protected struct ReportObject
        {
            public ReportClass _report;
            public int _copies;

            public ReportObject(ReportClass report, int copies)
            {
                _report = report;
                _copies = copies;
            }
        }

        private static Printer _instance;
        public static Printer GetInstance()
        {
            if (_instance == null)
                _instance = new Printer();
            return _instance;
        }

        #region Protected Method
        protected void PrintReceipt(ReportClass receipt, int copies)
        {
            ReportObject reportObj = new ReportObject(receipt,copies);

            Thread thread = new Thread(new ParameterizedThreadStart(doPrintReceiptThead));

            if (_listThread.Count >= MAX_PRINTING_THREAD)
            {
                Thread oldThread = _listThread[0];
                oldThread.Abort();
                _listThread.RemoveAt(0);
            }
            _listThread.Add(thread);

            thread.Start(reportObj);
        }

        protected void doPrintReceiptThead(object objParameter)
        {
            if (objParameter != null)
            {
                ReportObject reportObj = ((ReportObject)objParameter);
                reportObj._report.PrintToPrinter(reportObj._copies, false, 0, 0);
            }
        }
        #endregion

        #region Public Method
        public void PrintBusTickets(IEnumerable<Ticket> ticket, Bus bus, Tour tour)
        {
            using(crBusTicketList report = new crBusTicketList())
            using (ReportReviewer reviewer = new ReportReviewer())
            {
                report.SetDataSource(TicketReportEntity.ConvertFromReportEntityList(ticket, bus, tour));
                reviewer.ReportSource = report;
                reviewer.ShowDialog();
            }
        }

        public void PrintTicketReciept(IEnumerable<Ticket> ticket, Bus bus, Tour tour)
        {
            using (crTicketReceipt report = new crTicketReceipt())
            {
                report.SetDataSource(TicketReportEntity.ConvertFromReportEntityList(ticket, bus, tour));
                PrintReceipt(report, 1);
            }
        }
        #endregion

    }
}
